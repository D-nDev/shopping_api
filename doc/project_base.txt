Arquitetura:
  * MVC
  * Pastas:
	model: db
	controllers: funcoes que interagem diretamente com as regras de negócio
	cart: cart.json, devido a falta do front para armazenar o carrinho atual, será armazenado em um json
  config: pasta com definições de configs(db e ratelimit)
  functions: funções auxiliares dos controllers
  sql: Queries e modelo do dbdesigner
  templates: templates de e-mail
  cart: carrinho dos usuários
  coupon: cupom dos usuários(caso possua)
  logs: logs de queries, requisições e erros do SQL
  middlewares: middlewares aplicados as rotas
  * routes.js: rotas

Libs usadas:
  - express: padrão
  - pg: padrão
  - cookie-parser: padrão
  - jwt: padrão
  - morgan: armazenamento e processamento de logs detalhados das requests sendo feitas nas rotas com dados avaliativos
  - bcrypt: criptografia da senha
  - crypto: gerar código hash para recuperação de senha
  - helmet: prevenção de ataques comuns como XSS
  - nodemailer: envio de e-mail solicitando reembolso/contato
  - fs_extra(talvez): melhorar leitura de json, armazenar o carrinho em um .json devido a falta de um localstorage por não haver front-end
  - dotenv: armazenar dados do email e SMS em .env


Fluxo de CRUD usuário:

  /register
	registra um usuário, Dados:
	- Email
	- Primeiro Nome
	- Último nome
	- RG/CPF
	- Senha
	- Endereço
	- Cidade(via API externa se possível)
	- Estado(via API externa se possível)
	- CEP
	- Data de nascimento
	- Telefone celular

  /login
	Loga um usuário caso e-mail e senha correspondam

  /requestpass_email
	Solicita um reset de senha por e-mail

  /requestpass_sms
	Solicita um reset de senha por SMS

  /resetpass
	Recupera a senha através de uma nova senha e caso o código esteja correto.

  /deleteaccount
	Realiza um soft delete de uma conta específica

  /logout
  Realiza logout da conta

	

Fluxo de vendas para USUÁRIO:

  POST /addcart?productid=id:
	Realiza um select no bd, tras os dados do produto através do id requisitado e adiciona ao CARRINHO 
	caso possua quantidade desejada em estoque

  GET /cart
	Retorna o carrinho do usuário atual

  POST /buy
	Realiza uma compra com os itens no carrinho, podendo ser aplicado um cupom de desconto ao qual vira da req.body.
	Após é iniciada uma transaction para processar o header, os itens vendidos, e a adição de um titulo a receber.

  GET /coupon
  Devolve se o usuário tem ou não um cupom ativo no carrinho

  POST /addcoupon?coupon=
  Adiciona um cupom ao carrinho e atualiza os preços caso necessário

  DELETE /coupon
  Remove o cupom do carrinho e atualiza os preços caso necessário

  PUT /modifycart?productid=id&&quantity=quantity
	No carrinho será possível aumentar ou diminuir a quantidade. Será feita uma consulta no bd para verificar o estoque

  DELETE /removeproduct?productid=id
	Remove um produto do carrinho, e retorna a quantidade ao estoque no bd

  POST /requestrefund?userid=id&&saleheaderid=id
	O usuário pode requisitar um reembolso, sendo enviado para o e-mail da equipe responsável sua mensagem, o id do usuário, e o id da compra e armazenado na tabela req_refunds a solicitação

  POST /contact
	Envia um e-mail para os responsáveis, através da req.body: email, name, subject, message e priority

  GET /myorders?saleheaderid=
  Retorna os produtos comprados por um usuário em uma venda específica

  GET /usersales
  Retorna todos os produtos de todas as vendas do usuário logado ou de uma específica com o req.query.saleheaderid

Fluxo de estorno realizado por pessoas AUTORIZADAS:

  /refund?refundid=id
	Caso após análise do setor responsável o reembolso seja autorizado, através dessa rota é possível realizar o mesmo.
	Será feito o soft delete do sale_header e o sale_items respectivos a compra e também do titulos a receber.


Fluxo ADMIN:

  POST /addproduct
  Recebe o id do grupo, nome, preço e descrição pela req.body e adiciona um novo produto a loja

  POST /addgroup
  Recebe um name na req.body e adiciona um novo grupo de produtos a loja

  POST /addcode
  Recebe o code, discount e type_discount da req.body e adiciona um novo cupom de desconto ao bd

  POST /addprovider
	Recebe documento, nome, país, estado, produto vendido, telefone e código postal pela req.body e adiciona um novo provider

  POST /addpaymentmethod
  Recebe name, portion e daystopay na req.body e cria um novo metódo de pagamento

  POST /refund
  Recebe um id na req.query e aprova o reembolso de uma solicitação

  POST /addstock
  Adiciona stock para um produto da req.query.productid e req.query.amount

  DELETE /deleteproduct
  Recebe um id na req.query e deleta um produto do bd

  DELETE /deletegroup
  Recebe um id na req.query e deleta um grupo de produtos do bd

  DELETE /deleteprovider
  Recebe um id de provider na req.query e deleta do bd

  DELETE /deletecode
  Recebe um id de um código promocional na req.query e deleta do bd

  DELETE /deleteaccount
  Recebe o id de uma conta na req.query(Que não seja da atual logada) e deleta do bd

  DELETE /paymentmethod
  Recebe um id na req.query e deleta o metódo de pagamento

  GET /product
  Recebe um id na req.query e traz os produtos do bd

  GET /group
  Recebe um id na req.query e traz os grupos de produtos do bd

  GET /provider
  Recebe um id na req.query e traz os providers do bd

  GET /code
  Recebe um id de um código promocional(ou todos) e traz do bd

  GET /paymentmethod
  Recebe um id e tras os dados do metódo de pagamento, ou se nenhum for especificado tras todos

  GET /cashflow
  Retorna o fluxo de caixa atual

  GET /salesmonth
  Recebe o month(em INT) na req.query e retorna as vendas do mes
  
  PUT /product
  Recebe um name e/ou description na req.body e o id do produto na req.query e o altera

  PUT /group
  Recebe um name na req.body e o id do grupo na req.query e o altera

  PUT /provider
  Recebe um document e/ou um name na req.body e o id na req.query e o altera

  PUT /code
  Recebe um discount e/ou type_discount e/ou code na req.body e o id do código na req.query e o altera

  PUT /paymentmethod
  Recebe um id na req.query e um name e/ou portion e/ou daystopay na req.body e atualiza o metódo

  PUT /updatestock
  Atualiza o estoque de um produto por req.query.productid e req.query.amount

Progresso Geral: 100%
  